
<div class="form-group row">
  <label for="@PropertyName" class="col-lg-2 col-form-label">@(Caption ?? PropertyName)</label>
  <div class="col-lg-10 input-group">
    <div class="input-group-prepend">
      <span class="input-group-text">
        <i class="@Icon"></i>
      </span>
    </div>
    <select class="form-control @_invalid" name="@PropertyName" id="@PropertyName" @onchange="@OnChanged">
      @foreach ((int? val, string name) v in Values) {
        <!-- TODO AYS - This will only set the value when the control is loaded. If the selection is changed, the parent will not be informed of the change. Need to work out how to do two-way binding -->
        if (v.val == Value) {
          <option value="@v.val" selected>@v.name</option>
        } else {
          <option value="@v.val">@v.name</option>
        }
      }
    </select>
    <div class="input-group-append">
      <div class="input-group-text has-error">
        @if (_showValidationMsg) {
          <ValidationMessage For="@ValueExpression" />
        }
      </div>
    </div>
  </div>
</div>

@code {

  [CascadingParameter]
  public EditContext CascadedEditContext { get; set; }

  [Parameter]
  public string PropertyName { get; set; }

  [Parameter]
  public IEnumerable<(int? val, string name)> Values { get; set; }

  [Parameter]
  public int? Value { get; set; }

  [Parameter]
  public EventCallback<int?> ValueChanged { get; set; }

  [Parameter]
  public string Caption { get; set; }

  [Parameter]
  public string Icon { get; set; }

  [Parameter]
  public Expression<Func<int?>> ValueExpression { get; set; }

  private bool _showValidationMsg = false;
  private string _invalid = "";

  private async Task OnChanged(ChangeEventArgs cea) {
    if (cea.Value == null) {
      await ValueChanged.InvokeAsync(null);
    } else {
      await ValueChanged.InvokeAsync(Convert.ToInt32(cea.Value));
    }
    FieldIdentifier identifier = CascadedEditContext.Field(PropertyName);
    CascadedEditContext.NotifyFieldChanged(identifier);
  }

  protected override void OnInitialized() {
    CascadedEditContext.OnValidationStateChanged += EditContext_OnValidationStateChanged;
    base.OnInitialized();
  }

  private void EditContext_OnValidationStateChanged(object sender, ValidationStateChangedEventArgs e) {
    FieldIdentifier identifier = CascadedEditContext.Field(PropertyName);
    _showValidationMsg = CascadedEditContext.GetValidationMessages(identifier).Any();
    _invalid = _showValidationMsg ? "invalid" : "";
  }

}