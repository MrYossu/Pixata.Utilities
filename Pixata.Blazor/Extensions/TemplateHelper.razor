@code {

  public RenderFragment<object> BuildTemplate<T>(Func<T, string> convert, string style = "", string classCss = "") where T : class =>
    context => __builder => {
      <div class="@classCss" style="@style">@(new MarkupString(convert(context as T)))</div>
    };

  public RenderFragment<object> BuildTemplateLink<T>(Func<T, string> convert, Func<T, string> uri, string style = "", string classCss = "", string title = "") where T : class =>
    context => __builder => {
      if (string.IsNullOrWhiteSpace(title)) {
        title = context.ToString();
      }
      <div class="@classCss" style="@style"><a href="@uri(context as T)" title="@title">@(new MarkupString(convert(context as T)))</a></div>
    };

  public RenderFragment<object> BuildTemplateLink<T>(Func<T, string> convert, Func<T, string> uri, Func<T, string> styleFunc = null, Func<T, string> cssFunc = null, Func<T, string> titleFunc = null) where T : class =>
    context => __builder => {
      string style = styleFunc is null
        ? context.ToString()
        : styleFunc(context as T);
      string title = titleFunc is null
        ? context.ToString()
        : titleFunc(context as T);
      string css = cssFunc is null
        ? context.ToString()
        : cssFunc(context as T);
      <div class="@css" style="@style"><a href="@uri(context as T)" title="@title">@(new MarkupString(convert(context as T)))</a></div>
    };

}