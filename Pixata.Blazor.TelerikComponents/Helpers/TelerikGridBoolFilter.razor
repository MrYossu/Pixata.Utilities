@using Telerik.DataSource

@code {

  public RenderFragment<FilterCellTemplateContext> BuildTemplate() =>
    context => __builder => {
      BoolFilterContext = context;
      <TelerikCheckBox @bind-Value="@IsTrue"
                       Indeterminate="@(!IsTrue.HasValue)"
                       OnChange="@SetupFilter"
                       Class="mt-1">
      </TelerikCheckBox>
      <TelerikButton ButtonType="ButtonType.Button"
                     Class="k-clear-button-visible ml-2"
                     Enabled="@IsTrue.HasValue"
                     OnClick="@ClearBoolFilter">
        X
      </TelerikButton>
    };

  public FilterCellTemplateContext BoolFilterContext { get; set; } = null!;
  public bool? IsTrue { get; set; }

  public async Task ClearBoolFilter() {
    IsTrue = null;
    await BoolFilterContext.ClearFilterAsync();
  }

  public async Task SetupFilter() {
    if (BoolFilterContext != null && !IsTrue.HasValue) {
      await BoolFilterContext.ClearFilterAsync();
    } else {
      if (BoolFilterContext?.FilterDescriptor?.FilterDescriptors != null
          && BoolFilterContext.FilterDescriptor.FilterDescriptors.Any()
          && BoolFilterContext.FilterDescriptor.FilterDescriptors[0] is FilterDescriptor) {
        FilterDescriptor? filterRule = BoolFilterContext.FilterDescriptor.FilterDescriptors[0] as FilterDescriptor;
        if (filterRule != null) {
          filterRule.Value = IsTrue != null && IsTrue.Value;
          filterRule.Operator = FilterOperator.IsEqualTo;
          await BoolFilterContext.FilterAsync();
        }
      }
    }
  }

}