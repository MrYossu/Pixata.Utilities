@using System.Linq.Expressions
<div class="form-group row">
  <label for="@PropertyName" class="col-lg-2 col-form-label">@(Caption ?? PropertyName)</label>
  <div class="col-lg-10 input-group">
    <div class="input-group-prepend">
      <span class="input-group-text" style="display: inline-block">
        <i class="far fa-@Icon"></i>
      </span>
    </div>
    <TelerikEditor Value="@Value" ValueChanged="@OnChanged" ValueExpression="@(() => Value)" Height="@Height" Width="@Width"></TelerikEditor>
    @if (_showValidationMsg) {
      <div class="input-group-append"><label class="input-group-text has-error" for="@PropertyName"><ValidationMessage For="@ValueExpression" /></label></div>
    }
  </div>
</div>

@code {

  [CascadingParameter]
  public EditContext CascadedEditContext { get; set; }

  [Parameter]
  public string PropertyName { get; set; }

  [Parameter]
  public string Value { get; set; }

  [Parameter]
  public EventCallback<string> ValueChanged { get; set; }

  [Parameter]
  public string Caption { get; set; }

  [Parameter]
  public string Icon { get; set; }

  [Parameter]
  public string Height { get; set; } = "400px";

  [Parameter]
  public string Width { get; set; } = "100%";

  [Parameter]
  public Expression<Func<string>> ValueExpression { get; set; }

  private bool _showValidationMsg;

  private async Task OnChanged(string s) {
    await ValueChanged.InvokeAsync(s ?? "");
    FieldIdentifier identifier = CascadedEditContext.Field(PropertyName);
    CascadedEditContext.NotifyFieldChanged(identifier);
  }

  protected override void OnInitialized() {
    CascadedEditContext.OnValidationStateChanged += EditContext_OnValidationStateChanged;
    base.OnInitialized();
  }

  private void EditContext_OnValidationStateChanged(object sender, ValidationStateChangedEventArgs e) {
    FieldIdentifier identifier = CascadedEditContext.Field(PropertyName);
    _showValidationMsg = CascadedEditContext.GetValidationMessages(identifier).Any();
  }

}